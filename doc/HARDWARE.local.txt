// Sun Nov 19 04:34:38 UTC 2017
// 4735-b0c-07g-   the -07x- is new Nov 19, 2017.

// modified: use D13 not D18 for the red LED when target is Gemma M0

// previous timestamps:
// Sun Nov 19 03:57:49 UTC 2017
// Sun Nov 19 02:54:46 UTC 2017
// Fri Jun  9 02:32:35 UTC 2017

HARDWARE.local.txt

19 Nov 2017 update:

This is a simple commit series (on this calendar date) to
ensure which platform (apparently, the Gemma M0) is currently
compiled-for.  There are several.  And it changes rapidly.

The goal is to make ainsuForth compatible with a wider
variety of Adafruit-vended M0 target boards (Metro M0
Express, Gemma M0, Arduino M0 Pro, and others).

Flavor of the day happens to be the Gemma M0 (19 Nov 2017).

If memory serves, the Gemma M0 is unique in that it has the
onboard dotstar (a kind of colour LED) whereas most of the
other targets (from Adafruit) have the NeoPixel, rather than
the dotstar.

They use different libraries and are not equivalent, except
perhaps to the end user, who sees 'a colored LED' on the
Gemma M0.



Behavior

The Gemma M0 wearable target is somewhere near the size of
a quarter-dollar coin (USA coinage).  It has the dotstar,
which is lit (sequentially) through three colours (green,
red, blue).  Prior to that, there's some colors that flash
quickly on the dotstar (magenta, then green?).

The three-color strobe is there just to let the human know
things are going well inside the SAMD21E18A MCU.

Once the three-color strobe has finished (it iterates just
once) the fixed-color LED continues to flash, to (again)
let the human know something is going on.

 . . .

The design calls for this: that something be flashing,
continually, once the unit is powered on.  This is provided
to allow a human to plug it into a power source and know
that a given status is active.

Specifically, that status is 'waiting for a serial connection
through the USB port'.  It wants something to talk to.  That
is why it is blinking.

ONCE CONNECTED TO, using a serial terminal type of program
(putty, for example) the red fixed-color LED will stop
blinking.  Instead, an interactive prompt should appear
in the terminal (the Gemma M0 will emit ANSI escape sequences,
including some that change the colour of the text being
sent to the terminal).

To see this in action, connect to the Gemma M0 over the
USB port.  In the reference host system, microcom was
used at 115200 bps and the name of the port generated
by the target SAMD21 stamp is (in Linux) /dev/ttyACM0.

 $ microcom -s 115200 -p /dev/ttyACM0 

On the terminal will be seen:

connected to /dev/ttyACM0
Escape character: Ctrl-\
Type the escape character followed by c to get to the menu or q to quit

 warm boot message - early bird.  //  Gemma M0 29 Jul 2017
          type 'warm' to reboot

     ainsuForth - 2017 - wa1tnr    words: 79  
         YAFFA - Yet Another Forth For Arduino, 
         Copyright (C) 2012 Stuart Wood

- - - - - - - -

From there, type 'words' for a current list of defined
forth words available for use, or 'help' to remind you
that it's 'words' rather than 'help' -- or 'warm' if
you wanted to reboot without touching anything but the
terminal's keyboard.  That gives a warm boot (a software-
commanded reset).  See the source for how this is
accomplished:

    from ../src/kernel/warm.cpp

    #include "warm.h"
    const char warm_str[] = "warm";
    void _warm(void) {
        NVIC_SystemReset();      // processor software reset
    }

That's all non-specific to Gemma M0 so it's a bit redundant
to discuss it in this HARDWARE.local.txt file.

What is specific to the Gemma M0 is use of the dotstar LED, which
was described (see above).

---------------- this line ---------

Everything below this line is stale information, in November, 2017.
Some of it will be accidentally true (will still be current).  Some,
may not (was not looked at for months, nor recently).



  pin 18 is A4 - the LCD backlight driver is presently
                 wired to it.  It can be used as a
                 blinkenlight, in the absence of a
                 conventional discrete LED (the onboard
                 NeoPixel needs a library).


Forth code to be typed into ainsuForth (19 Nov 2017):

: testLED
 1 13 pinMode
 1 13 pinWrite
 5 1000 *
 delay
 0 13 pinWrite
;

That's enough to demo the system (in a very basic way).


: testLED-with-comments
 1 13 pinMode ( p18 GPIO: OUTPUT )
 1 13 pinWrite ( p18 HIGH: LED is ON )
 5 1000 * ( 5000: 5 seconds )
 delay
 0 13 pinWrite ( p18 LOW: LED is OFF )
;



relevant code in this Forth (Dictionary.cpp):

2237 const char pinWrite_str[] = "pinWrite";
2238 // ( u1 u2 -- )
2239 // Write a high (1) or low (0) value to a digital pin
2240 // u1 is the pin and u2 is the value ( 1 or 0 ). To turn the LED attached to
2241 // pin 13 on type "13 1 pinwrite" p.s. First change its pinMode to output
2242 void _pinWrite(void) {
2243   digitalWrite(dStack_pop(), dStack_pop());
2244 }
2245 
2246 const char pinMode_str[] = "pinMode";
2247 // ( u1 u2 -- )
2248 // Set the specified pin behavior to either an input (0) or output (1)
2249 // u1 is the pin and u2 is the mode ( 1 or 0 ). To control the LED attached to
2250 // pin 13 to an output type "13 1 pinmode"
2251 void _pinMode(void) {
2252   pinMode(dStack_pop(), dStack_pop());
2253 }


Example Application:

( blinkenlight.fs written in ainsuForth - YAFFA-ARM Forth )

( transpose 'pinX' and 'pin' in the code, below, )
( when making use of the standard, onboard LED -- )
( the one that is wired to pin 13. )
( otherwise pin 18 -- A4 -- will be used. )

: pin 18 ; ( the LED is on pin 18 aka A4 aka p18 )
: pinX 13 ; ( the LED is on pin 13 )
: OUTPUT 1 ; ( GPIO mode: OUTPUT is '1' )
: HIGH 1 ; ( GPIO port pin state: Vcc )
: LOW  0 ; ( GPIO port pin state: Gnd )
: ledSetup ( set p18 to OUTPUT )
  OUTPUT pin pinMode ; ( p18 GPIO: OUTPUT mode )
: ledON ( supply Vcc to the LED circuit via GPIO p18 )
  HIGH pin pinWrite ; ( p18 HIGH: LED is ON )
: ledOFF ( bring p18 to ground potential, disabling the LED circuit )
  LOW  pin pinWrite ; ( p18  LOW: LED is OFF )
: del.5sec 5 100 * ( 500 milliseconds. )
  delay ;
: blink.5sec ledON del.5sec ledOFF ;
: blink blink.5sec ; ( alias )
: lowtos cr ." That idiom is meaningless." cr
  abort" unexpected value <1  on TOS.  "
  quit exit ;
: tost ( test tos haha )
  1 - ( tos is now one less )
  dup 0< if lowtos quit exit then ( zero clue here )
  1 + ; ( restore it )
: blinkApp ( an application of the above code )
  tost 1 + dup 0= if quit exit then
  dup ( stack mismanagement kludge )
  ledSetup ledON ledOFF
  1 ( when this was '3' it blinked three less than TOS )
  do 1 - blink del.5sec dup 0=
  drop loop drop ;
: blinks blinkApp ; ( alias )

The above may be pasted directly into YAFFA or ainsuForth,
from a text editor.

That is, when you are on a tty in conversation with this
Forth, you can compose new words (new colon definitions).

Can't save them to disk, which is why you paste them
directly into the Forth, each time you reboot -- as
if you'd typed them, interactively.

EOF
